.
â”œâ”€â”€ __tests__
â”‚   â””â”€â”€ auth.test.js                    # Testes unitÃ¡rios e de integraÃ§Ã£o
â”œâ”€â”€ src
â”‚   â”œâ”€â”€ config
â”‚   â”‚   â””â”€â”€ db.config.js                # ConfiguraÃ§Ã£o do banco de dados MySQL
â”‚   â”œâ”€â”€ controllers
â”‚   â”‚   â”œâ”€â”€ Auth.controller.js          # LÃ³gica de autenticaÃ§Ã£o (login, logout, refresh)
â”‚   â”‚   â”œâ”€â”€ Monitoring.controller.js    # Controller de monitoramento de performance
â”‚   â”‚   â””â”€â”€ Token.controller.js         # ValidaÃ§Ã£o e decode de JWT tokens
â”‚   â”œâ”€â”€ helpers
â”‚   â”‚   â””â”€â”€ responses.js                # PadrÃµes de resposta da API (success/error)
â”‚   â”œâ”€â”€ middlewares
â”‚   â”‚   â”œâ”€â”€ complete_log.middleware.js  # Logger de requisiÃ§Ãµes completas
â”‚   â”‚   â”œâ”€â”€ error.middleware.js         # Handler de erros globais
â”‚   â”‚   â”œâ”€â”€ headers.middleware.js       # ValidaÃ§Ã£o de headers obrigatÃ³rios
â”‚   â”‚   â”œâ”€â”€ monitoring.middleware.js    # Coleta de mÃ©tricas de performance
â”‚   â”‚   â””â”€â”€ xrayRouteTracer.js          # Middleware de tracing AWS X-Ray (opcional)
â”‚   â”œâ”€â”€ models
â”‚   â”‚   â”œâ”€â”€ Monitoring.model.js         # Model para tabela de monitoramento
â”‚   â”‚   â”œâ”€â”€ Platform.model.js           # Model para controle de acesso por plataforma
â”‚   â”‚   â”œâ”€â”€ Token.model.js              # Model para refresh tokens
â”‚   â”‚   â””â”€â”€ User.model.js               # Model de usuÃ¡rios
â”‚   â”œâ”€â”€ routes
â”‚   â”‚   â”œâ”€â”€ auth.route.js               # Rotas de autenticaÃ§Ã£o (/api/v1/login, /refresh, /logout)
â”‚   â”‚   â”œâ”€â”€ index.js                    # Agregador de rotas
â”‚   â”‚   â”œâ”€â”€ monitoring.route.js         # Rota de mÃ©tricas de monitoramento
â”‚   â”‚   â””â”€â”€ token.route.js              # Rotas de validaÃ§Ã£o de token (/api/v1/validate, /me)
â”‚   â””â”€â”€ utils
â”‚       â”œâ”€â”€ TransactionGenerator.js     # Gerador de IDs Ãºnicos para transaÃ§Ãµes
â”‚       â””â”€â”€ logger.js                   # Logger hÃ­brido (local + CloudWatch opcional)
â”œâ”€â”€ .env.example                        # Template de variÃ¡veis de ambiente
â”œâ”€â”€ .gitignore                          # Arquivos ignorados pelo git
â”œâ”€â”€ Dockerfile                          # Imagem Docker para deploy
â”œâ”€â”€ README.md                           # DocumentaÃ§Ã£o completa do projeto
â”œâ”€â”€ app.js                              # Entry point da aplicaÃ§Ã£o Express
â”œâ”€â”€ docker-compose.yaml                 # OrquestraÃ§Ã£o de containers (opcional)
â”œâ”€â”€ estrutura.txt                       # Este arquivo - estrutura do projeto
â”œâ”€â”€ example-db.sql                      # Schema completo do banco de dados MySQL
â”œâ”€â”€ package-lock.json                   # Lock de dependÃªncias npm
â””â”€â”€ package.json                        # DependÃªncias e scripts do projeto

10 directories, 29 files

ðŸ“‹ COMANDOS ÃšTEIS:
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Para gerar/atualizar este arquivo, use um dos comandos:

# OpÃ§Ã£o 1: tree (mais bonito, precisa instalar)
tree -I 'node_modules|.git|logs' -L 3 --dirsfirst > estrutura.txt

# OpÃ§Ã£o 2: tree com charset para compatibilidade
tree -I 'node_modules|.git|logs' -L 3 --dirsfirst --charset ascii > estrutura.txt

# OpÃ§Ã£o 3: find (nativo, mais simples)
find . -type f -o -type d | grep -v node_modules | grep -v .git | sort > estrutura.txt

# Para instalar tree no macOS:
brew install tree

# Para instalar tree no Linux:
sudo apt-get install tree  # Ubuntu/Debian
sudo yum install tree      # CentOS/RHEL